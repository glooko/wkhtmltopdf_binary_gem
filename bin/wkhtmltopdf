#!/usr/bin/env ruby

###
# wkhtmltopdf_binary_gem Copyright 2013 The University of Iowa
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0

require 'rbconfig'
require 'fileutils'
require 'logger'
require 'digest'

LOGGER = Logger.new $stderr

def log_duration(log_name)
  LOGGER.info "#{log_name} start: #{start_time = Time.now.utc}"

  yield
ensure
  LOGGER.info "#{log_name} end: #{end_time = Time.now.utc}"
  LOGGER.info "#{log_name} total time: #{end_time - start_time} s"
end

suffix =
  case RbConfig::CONFIG['host_os']
  when /linux/
    case RbConfig::CONFIG['host_cpu']
    when 'x86_64'
      'debian_11_amd64'
    when 'aarch64'
      'debian_11_arm64'
    else
      'debian_11_i386'
    end
  when /darwin/
    'darwin_x86'
  else
    raise 'Invalid platform. Must be running on linux or intel-based Mac OS.'
  end

binary = "#{__FILE__}_#{suffix}"

raise 'chromium binary not found.' unless system('which chromium')

# ENV['PWD'] is path to kings-landing application root
# File location needs to match the one generated in Pdf::TemporaryHtmlFile
temp_path = "#{ENV.fetch('PWD')}/tmp/pdf"

# URL to the HTML file will always be second to last argument
html_url = ARGV[-2]

# we expect to receive URL in format of http://hostname/api/v3/pdf/raw_html/5debbdb1-c5a8-4620-8c88-03b30c2aa197
uuid = html_url.split('/').last
# File names need to match the ones generated in Pdf::TemporaryHtmlFile
html_path = "#{temp_path}/html_#{uuid}.html"
output_path = "#{temp_path}/output_#{uuid}.html"

# append digest to the original URL
html_url += "?digest=#{Digest::SHA256.file(html_path).hexdigest}"
chromium_command =
  'chromium --headless --disable-gpu --dump-dom ' \
  "#{Shellwords.escape(html_url)} > #{Shellwords.escape(output_path)}"

LOGGER.info "Executing command: #{chromium_command}"
success = log_duration('PDF: chromium execution') do
  system chromium_command
end
raise "chromium failed to generate HTML with '#{uuid}' UUID." unless success

# append parameters to the original URL. output=true tells Rails to return
# file with output_prefix (preprocessed by Chromium). Digest confirms that we
# have access to the file
ARGV[-2] += "?output=true&digest=#{Digest::SHA256.file(output_path).hexdigest}"

cmd = ARGV.unshift(binary)
cmd.insert(-3, '--enable-local-file-access')

LOGGER.info "Executing command: #{cmd}"
success = log_duration('PDF: wkhtmltopdf execution') do
  system(*cmd)
end

raise "wkhtmltopdf failed to generate HTML with '#{uuid}' UUID." unless success

# clean up temporary files
FileUtils.rm_f html_path
FileUtils.rm_f output_path
