#!/usr/bin/env ruby

###
# wkhtmltopdf_binary_gem Copyright 2013 The University of Iowa
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy
# of the License at http://www.apache.org/licenses/LICENSE-2.0

require 'rbconfig'
require 'zlib'
require 'securerandom'

suffix = case RbConfig::CONFIG['host_os']
         when /linux/
           os = `. /etc/os-release 2> /dev/null && echo ${ID}_${VERSION_ID}`.strip

           if os.start_with?('elementary') || os.start_with?('linuxmint') || os.start_with?('pop') || os.eql?('ubuntu_20.04')
             os = 'ubuntu_18.04'
           end

           # CentOS 6 doesn't have `/etc/os-release`.
           if (os.empty? && File.read('/etc/centos-release').start_with?('CentOS release 6')) ||
               os.start_with?('amzn_')
             os = 'centos_6'
           end

           # Deepin fallback
           os = 'debian_9' if /deepin/.match?(os)

           architecture = RbConfig::CONFIG['host_cpu'] == 'x86_64' ? 'amd64' : 'i386'

           "#{os}_#{architecture}"
         when /darwin/
           RbConfig::CONFIG['host_cpu'] == 'x86_64' ? 'macos_cocoa' : 'macos_carbon'
         else
           'unknown'
         end

binary = "#{__FILE__}_#{suffix}"

if File.exist?("#{binary}.gz") && !File.exist?(binary)
  File.open binary, 'wb', 0o755 do |file|
    Zlib::GzipReader.open("#{binary}.gz") { |gzip| file << gzip.read }
  end
end

unless File.exist? binary
  raise 'Invalid platform, must be running on Ubuntu 14.04/16.04/18.04 ' \
        'CentOS 6/7/8, Debian 8/9/10, or intel-based macOS ' \
        "(missing binary: #{binary})."
end

raise 'chromium-browser binary not found.' unless system('which chromium-browser')

uuid = SecureRandom.uuid
# ENV['PWD'] is path to kings-landing
temp_path = "#{ENV['PWD']}/tmp/pdf"
# create ENV['PWD']/tmp/pdf if it doesn't exist
system "[ ! -d #{temp_path} ] && mkdir #{temp_path}"

html_path = "#{temp_path}/html_#{uuid}.html"
File.open(html_path, 'wb') do |f|
  f.write "\uFEFF"
  f.write STDIN.read
end

output_path = "#{temp_path}/output_#{uuid}.html"
success = system "chromium-browser --headless --disable-gpu --dump-dom #{html_path} > #{output_path}"
raise "chromium-browser failed to generate html with '#{uuid}' uuid." unless success

cmd = $*.unshift(binary)
cmd[-2] = output_path
success = system *cmd
raise "wkhtmltopdf binary failed to generate pdf from #{output_path}." unless success

# kill hanging chromium snap process
system "kill -9 $(pgrep -f html_#{uuid}.html | awk '{print $1}')"
# clean up temporary files
system "rm -f #{temp_path}/html_#{uuid}.html #{temp_path}/output_#{uuid}.html"
